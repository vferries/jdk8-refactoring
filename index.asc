== Lambdas
* Single Asbtract Method / Functional Interface
* at compile time -> anonymous classes
* first code sample : refactor a runnable call

[source,java]
Runnable job = new Runnable() {
    @Override
    public void run() {
        System.out.println("Hello EclipseCon");
    }
};

Becomes:

[source,java]
Runnable job = () -> {
    System.out.println("Hello EclipseCon");
};

With some key strokes (Ctrl + 1 and Ctrl + 1).

* Frameworks with events greatly eased

Sample with Swing interface -> Global refactoring with Source -> Clean-up

== What's the point ?
* Use these closures (lambda expressions) as method parameters
* apply such functions to the elements of a collection
* condensed form :

[source,java]
Student student -> student.getName()

Becomes:

[source,java]
Student::getName


== Streams to the rescue
* Backward compatibility (not on Collections directly)
* Default method on interfaces
* Stream API
	- forEach, map, filter...
	- terminal operations (grouping, sum, reduce...)
* Improved readibility
* Only one iteration on the collection, no need to use intermediate collections for temporary storage