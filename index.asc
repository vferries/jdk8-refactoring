= Short introduction with slides
Who am I ?
Why are we here ?
* to learn what Java 8 has to offer
* to enhance our experience with Eclipse
* to explore what could be missing


== Lambdas
* Single Abstract Method / Functional Interface
* at compile time -> anonymous classes, but lighter
* first code sample : refactor a runnable call

[source,java]
Runnable job = new Runnable() {
    @Override
    public void run() {
        System.out.println("Hello EclipseCon");
    }
};

Becomes:

[source,java]
Runnable job = () -> {
    System.out.println("Hello EclipseCon");
};

With some key strokes (Ctrl + 1 and Ctrl + 1).
We first convert to a lambda and then convert the right part to a block expression.

* Frameworks with events greatly eased

Sample with Swing interface -> Global refactoring with Source -> Clean-up


== What's the point ?
* Avoid bad patterns (sample : service with predicate)
  - My boss told me to add new behaviours
  - I did a real mess
  - Just use some predicate instead
  - method composition (explain default methods here)
* I added some templates to Eclipse
  - foreach8
  - stream
* Extracting parameter

== Missing features
* Netbeans
  - for loop to stream or forEach
* IntelliJ Idea
  - for loop to stream or forEach
  - Extract parameter, [functional parameter]http://blog.jetbrains.com/idea/2015/02/intellij-idea-14-1-introduces-extract-functional-parameter-refactoring/


* Use these closures (lambda expressions) as method parameters
* apply such functions to the elements of a collection
* condensed form :

TODO Method reference
l'IDE n'aide pas... Les autres oui.

=
[source,java]
Student student -> student.getName()

Becomes:

[source,java]
Student::getName


== Streams to the rescue
* Backward compatibility (not on Collections directly)
* Default method on interfaces
* Stream API
	- forEach, map, filter...
	- terminal operations (grouping, sum, reduce...)
* Improved readibility
* Only one iteration on the collection, no need to use intermediate collections for temporary storage


= What is missing

== LAMBDAFICATOR (NetBeans)
http://refactoring.info/tools/LambdaFicator/
Inspect and tranform -> Global automated refactoring

* Anonymous classes to lambdas
* For loops to streams
  - java.util.Collection and not array
  - no checked exception
  - no local non-effectively-final variables
  - no break statements
  - a single return statement
  - no labeled goto

[source,java]
int count = 0;
for (ElementRule rule : getRules()) {
	if (rule.hasErrors()) {
		count += rule.getErrorCount();
	}
}
return count;

Becomes

[source,java]
int count = 0;
count = getRules().stream()
		  .filter((rule) -> (rule.hasErrors()))
		  .map((rule) -> rule.getErrorCount())
		  .reduce(count, (_acc, _item) -> _acc + _item);
return count;

But I would prefer :

[source,java]
return getRules().stream()
		  .filter(Rule::hasErrors)
		  .map(Rule::getErrorCount)
		  .reduce(0, (_acc, _item) -> _acc + _item);

== IntelliJ IDEA
* Extract functional parameter

== What we didn't cover
* JSR 305 and 308
* Date API
* 